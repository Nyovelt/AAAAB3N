<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IoT on canarypwn</title><link>https://aaaab3n.moe/tags/iot/</link><description>Recent content in IoT on canarypwn</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Fri, 12 Nov 2021 10:02:59 +0800</lastBuildDate><atom:link href="https://aaaab3n.moe/tags/iot/index.xml" rel="self" type="application/rss+xml"/><item><title>Nordic 开发板小寄</title><link>https://aaaab3n.moe/posts/2021-11-3-nordic/</link><pubDate>Fri, 12 Nov 2021 10:02:59 +0800</pubDate><guid>https://aaaab3n.moe/posts/2021-11-3-nordic/</guid><description>Starter 导师给了四块蓝牙开发板，nRF52840, nRF52833, 目标是跑通蓝牙并关注 BLE 的 audio 部分。本文面向有单片机开发经验的读者。
官方 SDK 进入官网有 SDK 可以下载 https://www.nordicsemi.com/Products/Development-software/nrf5-sdk/download#infotabs 这其中包含了 firmware 编译并写入 写入预编译文件 在目录 examples 下面存在预编译 hex 文件。以 C:\Users\Nyove\Downloads\DeviceDownload\nRF5_SDK_17.1.0_ddde560\examples\peripheral\blinky\hex 为例，将对应的 bin 放入开发板的文件夹内就行 (drag into the folder)，如图 之后明显的感觉板子会重启然后运行这个二进制文件，比如 softblink 就是慢慢的闪 LED 灯
官方还说可以安装 nRF Connect for Desktop 来通过 Jlink 与板子通信
编译 在官方说明中，使用 Keli IDE 来编译，同时与板子通信。 下载地址: keli MDK-Arm
打开对应的 project 文件，在工具栏上有 build rebuild download erase 的选项， 无缝衔接 Jlink， 这样基本就上手了。
下载与串口调试 笔者在进一步的尝试中发现，使用 SEGGER Embeded Studio 会极大的简化编译和下载过程，因为它连接 Jlinkl 的方式较为直观和简单。</description></item><item><title>在树莓派上配置Clash-linux</title><link>https://aaaab3n.moe/posts/2019-1-30-raspberrypi-clash-tutor/</link><pubDate>Wed, 30 Jan 2019 13:59:33 +0800</pubDate><guid>https://aaaab3n.moe/posts/2019-1-30-raspberrypi-clash-tutor/</guid><description>前言 一直在折腾家里的路由器和相关网络设备，想提供一个较为完美的网络环境。之前在Phicomm K2P上通过Openwrt安装luci-ssr-plus来进行国外ip的代理，但受限于简单的规则和MT7261令人捉鸡的性能，体验不佳。因此萌生了使用树莓派搭建透明网关的想法。在查阅了为数不多的教程并踩了很多坑以后基本搭建完成，并且到目前还未出现问题，所以说说如何使用。
准备工作 树莓派 正常的网络连接 一定的动手和解决问题的能力 Clash Clash is a rule-based tunnel in Go.
Clash 类似 IOS/Mac OS上的Surge，可以在提供SS/V2RAY代理的同时资瓷自定义的代理规则。
编译 虽然说Clash的项目主页说你可以通过go get -u -v github.com/Dreamacro/clash的方式构建，但是因为要去Google服务器上下载包而变得困难；项目主页的预先构建并不支持ARM架构的树莓派，因此需要自行编译。
这里@shinohara-rin 构建了 Clash-arm (v0.10.2) ，点击这里下载。
配置 首先将clash文件移动/下载到树莓派的目录下，然后移动到 /usr/local/bin，并给予权限。
# 把解压的二进制放到 /usr/local/bin 目录下 $sudo mv ./clash /usr/local/bin #给予权限 $chmod 555 /usr/local/bin 关于配置方法，Github的项目主页有详细的说明，在这里简单说一下我的配置。
#运行Clash $clash 正常的话会提示
INFO[0000] Can&amp;#39;t find config, create a empty file INFO[0000] Can&amp;#39;t find MMDB, start download FATA[0005] Parse config error: Configuration file /home/pi/.</description></item></channel></rss>